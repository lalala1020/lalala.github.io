{"version":3,"sources":["webpack://gitpod-remote-ssh/./src/cli.ts","webpack://gitpod-remote-ssh/external \"http\"","webpack://gitpod-remote-ssh/webpack/bootstrap","webpack://gitpod-remote-ssh/webpack/startup"],"names":["fatal","err","console","error","process","exit","async","argv","env","Promise","resolve","reject","req","http","request","socketPath","method","res","chunks","setEncoding","on","d","push","result","join","statusCode","Error","undefined","write","JSON","stringify","type","url","end","e","main","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"6nBAIA,mBAEA,SAASA,EAAMC,GACdC,QAAQC,MAAMF,GACdG,QAAQC,KAAK,IAGdC,eAAoBC,GACnB,IAAKH,QAAQI,IAA2B,sBACvC,OAAOR,EAAM,gBAEd,GAAgB,cAAZO,EAAK,IAAsBA,EAAK,GACnC,UACO,IAAIE,SAAc,CAACC,EAASC,KACjC,MAAMC,EAAMC,EAAKC,QAAQ,CACxBC,WAAYX,QAAQI,IAA2B,sBAC/CQ,OAAQ,SACNC,IACF,MAAMC,EAAmB,GACzBD,EAAIE,YAAY,QAChBF,EAAIG,GAAG,QAAQC,GAAKH,EAAOI,KAAKD,KAChCJ,EAAIG,GAAG,OAAO,KACb,MAAMG,EAASL,EAAOM,KAAK,IACJ,MAAnBP,EAAIQ,WACPd,EAAO,IAAIe,MAAM,oBAAoBT,EAAIQ,eAAeF,MAExDb,OAAQiB,SAIXf,EAAIQ,GAAG,SAASnB,GAAOU,EAAOV,KAC9BW,EAAIgB,MAAMC,KAAKC,UAAU,CACxBC,KAAM,UACNC,IAAKzB,EAAK,MAEXK,EAAIqB,SAEJ,MAAOC,GACRlC,EAAMkC,IAKTC,CAAK/B,QAAQG,O,SC/Cb6B,EAAOC,QAAUC,QAAQ,UCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBf,IAAjBgB,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,M","file":"cli.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Gitpod. All rights reserved.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as http from 'http';\n\nfunction fatal(err: any): void {\n\tconsole.error(err);\n\tprocess.exit(1);\n}\n\nasync function main(argv: string[]): Promise<void> {\n\tif (!process.env['GITPOD_REMOTE_CLI_IPC']) {\n\t\treturn fatal('Missing pipe');\n\t}\n\tif (argv[2] === '--preview' && argv[3]) {\n\t\ttry {\n\t\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\t\tconst req = http.request({\n\t\t\t\t\tsocketPath: process.env['GITPOD_REMOTE_CLI_IPC'],\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t}, res => {\n\t\t\t\t\tconst chunks: string[] = [];\n\t\t\t\t\tres.setEncoding('utf8');\n\t\t\t\t\tres.on('data', d => chunks.push(d));\n\t\t\t\t\tres.on('end', () => {\n\t\t\t\t\t\tconst result = chunks.join('');\n\t\t\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\t\t\treject(new Error(`Bad status code: ${res.statusCode}: ${result}`));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treq.on('error', err => reject(err));\n\t\t\t\treq.write(JSON.stringify({\n\t\t\t\t\ttype: 'preview',\n\t\t\t\t\turl: argv[3]\n\t\t\t\t}));\n\t\t\t\treq.end();\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tfatal(e);\n\t\t}\n\t}\n}\n\nmain(process.argv);\n","module.exports = require(\"http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(5453);\n"],"sourceRoot":""}